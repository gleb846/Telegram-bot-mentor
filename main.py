import telebot
from telebot import types
from types import SimpleNamespace
import sqlite3
import hashlib
import g4f
from datetime import datetime, timedelta, date
from apscheduler.schedulers.background import BackgroundScheduler

bot = telebot.TeleBot('7265663636:AAFwY5EF08zyVbPKzpTZ0CPBxhs4OiGruj8')
pending_tasks = {}
MOTIVATIONS = [
    "–£—á—ë–±–∞ ‚Äî —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Å–µ–±—è. –ß–µ–º –±–æ–ª—å—à–µ –≤–∫–ª–∞–¥—ã–≤–∞–µ—à—å —Å–µ–π—á–∞—Å, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—É—á–∏—à—å –ø–æ—Ç–æ–º!",
    "–î–∞–∂–µ –µ—Å–ª–∏ –∏–¥—ë—à—å –º–µ–¥–ª–µ–Ω–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è. –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –ø–æ–±–µ–¥–∞–º!",
    "–¢–≤–æ–π –º–æ–∑–≥ ‚Äî –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ß–µ–º –±–æ–ª—å—à–µ –µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è!",
    "–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–µ–ª–∞—é—Ç —Ç–µ–±—è —É–º–Ω–µ–µ. –ù–µ –±–æ–π—Å—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π ‚Äî –æ–Ω–∏ –∑–∞–∫–∞–ª—è—é—Ç!",
    "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —É—Ä–æ–∫ ‚Äî –∫–∏—Ä–ø–∏—á–∏–∫ –≤ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–µ —Ç–≤–æ–µ–≥–æ —É—Å–ø–µ—Ö–∞. –°—Ç—Ä–æ–π –∫—Ä–µ–ø–∫–æ!",
    "–£—Å—Ç–∞–ª? –°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤, –Ω–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! –ü–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞ ‚Äî —Å–Ω–æ–≤–∞ –≤ –±–æ–π!",
    "–ö–∞–∂–¥–∞—è —Ä–µ—à—ë–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —à–∞–≥ –±–ª–∏–∂–µ –∫ –º–µ—á—Ç–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π!",
    "–ó–Ω–∞–Ω–∏—è ‚Äî —ç—Ç–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞. –ß–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–∂–µ—à—å!",
    "–ù–µ –≥–æ–≤–æ—Ä–∏ '—è –Ω–µ –º–æ–≥—É', —Å–∫–∞–∂–∏ '—è –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª—Å—è' ‚Äî –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π!",
    "–¢—ã –Ω–µ –æ–¥–∏–Ω –≤ —ç—Ç–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ. –í—Å–µ –≤–µ–ª–∏–∫–∏–µ –∫–æ–≥–¥–∞-—Ç–æ —Ç–æ–∂–µ –±—ã–ª–∏ —à–∫–æ–ª—å–Ω–∏–∫–∞–º–∏!",
    "–ó–∞–ø–æ–º–Ω–∏: –æ—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ–≤–∞–ª, –∞ —É—Ä–æ–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –¥–≤–∏–≥–∞–π—Å—è –¥–∞–ª—å—à–µ!",
    "–ß–µ–º —Å–ª–æ–∂–Ω–µ–µ —Å–µ–π—á–∞—Å, —Ç–µ–º –ª–µ–≥—á–µ –±—É–¥–µ—Ç –ø–æ—Ç–æ–º. –î–µ—Ä–∂–∏—Å—å!",
    "–¢–≤–æ—ë –±—É–¥—É—â–µ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è. –í—ã–±–∏—Ä–∞–π —É–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è!",
    "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ 10% —Ç–∞–ª–∞–Ω—Ç–∞ –∏ 90% —Ç—Ä—É–¥–∞. –†–∞–±–æ—Ç–∞–π –Ω–∞–¥ —Å–æ–±–æ–π!",
    "–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –∏ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!"
]

scheduler = BackgroundScheduler()
scheduler.start()
back_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
back_kb.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
conn = sqlite3.connect('bot_data.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    tg_id      INTEGER PRIMARY KEY,
    xp         INTEGER NOT NULL DEFAULT 0,
    streak     INTEGER NOT NULL DEFAULT 0,
    last_active DATE
)
''')
conn.commit()
cursor.execute('''
CREATE TABLE IF NOT EXISTS psychologist_history (
    id        INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id     INTEGER NOT NULL,
    question  TEXT    NOT NULL,
    answer    TEXT    NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()
cursor.execute('''
CREATE TABLE IF NOT EXISTS homework_history (
    id        INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id     INTEGER NOT NULL,
    question  TEXT    NOT NULL,
    answer    TEXT    NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()
cursor.execute('''
CREATE TABLE IF NOT EXISTS health_checks (
    id            INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id         INTEGER NOT NULL,
    sleep_rating  INTEGER,
    fatigue       TEXT,
    mood          TEXT,
    tips          TEXT,
    created_at    DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()
cursor.execute('''
CREATE TABLE IF NOT EXISTS sleep_prefs (
    tg_id       INTEGER PRIMARY KEY,
    bedtime     TEXT
)
''')
conn.commit()
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id       INTEGER NOT NULL,
    description TEXT    NOT NULL,
    duration    INTEGER NOT NULL,
    priority    TEXT    NOT NULL,
    task_date   DATE    NOT NULL,
    done        INTEGER NOT NULL DEFAULT 0
)
''')
conn.commit()
cursor.execute('''
CREATE TABLE IF NOT EXISTS habits (
    id       INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id    INTEGER NOT NULL,
    name     TEXT    NOT NULL
)
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS habit_log (
    id        INTEGER PRIMARY KEY AUTOINCREMENT,
    habit_id  INTEGER NOT NULL,
    log_date  DATE    NOT NULL,
    done      INTEGER NOT NULL,
    UNIQUE(habit_id, log_date)
)
''')
conn.commit()


@bot.message_handler(commands=['start'])
def start(message):
    ensure_user_exists(message.chat.id)
    markup = types.InlineKeyboardMarkup()
    scheduling_btn = types.InlineKeyboardButton('–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω', callback_data='scheduling')
    health_btn = types.InlineKeyboardButton('–ó–¥–æ—Ä–æ–≤—å–µ', callback_data='health')
    lessons_btn = types.InlineKeyboardButton('–ü–æ–º–æ—â—å —Å –î–ó', callback_data='lessons')
    help_btn = types.InlineKeyboardButton('–ò–ò-–ü—Å–∏—Ö–æ–ª–æ–≥', callback_data='psychologist')
    level_btn = types.InlineKeyboardButton('XP Game', callback_data='xp_game')
    leaderboard_btn = types.InlineKeyboardButton('–õ–∏–¥–µ—Ä—ã', callback_data='leaderboard')
    markup.row(level_btn)
    markup.row(leaderboard_btn)
    markup.row(scheduling_btn)
    markup.row(lessons_btn)
    markup.row(health_btn, help_btn)
    with open('start_photo.jpg', 'rb') as photo:
        bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñ\n\n"
                    "üóìÔ∏è ¬´–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω¬ª ‚Äî –ø–ª–∞–Ω–∏—Ä—É–π –¥–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –ò–ò\nüìö ¬´–ü–æ–º–æ—â—å —Å –î–ó¬ª ‚Äî —Ä–µ—à–∞–µ–º –∑–∞–¥–∞—á–∏\n"
                    "‚ù§Ô∏è ¬´–ó–¥–æ—Ä–æ–≤—å–µ¬ª ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é\nüß† ¬´–ò–ò‚Äë–ø—Å–∏—Ö–æ–ª–æ–≥¬ª ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã\n"
                    "üéÆ ¬´XP Game¬ª ‚Äî –ø—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–µ–±—è –∏ –ø–æ–ª—É—á–∞–π XP\n\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏ –≤–ø–µ—Ä–µ–¥! üöÄ",
            reply_markup=markup
        )


@bot.callback_query_handler(func=lambda c: c.data.startswith("prio_"))
def plan_add_prio(call):
    if call.data == "back":
        return go_scheduling(call)
    if not pending_tasks.get(call.from_user.id):
        return bot.answer_callback_query(call.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    prio = {
        "prio_high": "–í—ã—Å–æ–∫–∏–π",
        "prio_medium": "–°—Ä–µ–¥–Ω–∏–π",
        "prio_low": "–ù–∏–∑–∫–∏–π"
    }[call.data]
    desc = pending_tasks.get(call.from_user.id)['desc']
    dur = pending_tasks.get(call.from_user.id)['duration']
    cursor.execute(
        "INSERT INTO tasks (tg_id, description, duration, priority, task_date, done) "
        "VALUES (?, ?, ?, ?, ?, 0)",
        (call.from_user.id, desc, dur, prio, date.today().isoformat())
    )
    conn.commit()
    bot.send_message(call.from_user.id, "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    pending_tasks.pop(call.from_user.id, None)
    go_scheduling(call)


@bot.callback_query_handler(func=lambda c: c.data.startswith("complete_"))
def handle_complete(call):
    task_id = int(call.data.split("_", 1)[1])
    tg = call.from_user.id
    cursor.execute("UPDATE tasks SET done = 1 WHERE id = ?", (task_id,))
    cursor.execute("UPDATE users SET xp = xp + 10 WHERE tg_id = ?", (tg,))
    conn.commit()
    bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! +10 XP")
    show_tasks(call, for_date=date.today())


@bot.callback_query_handler(func=lambda c: c.data == 'plan_add')
def handle_plan_add(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    plan_add_start(call)


@bot.callback_query_handler(func=lambda c: c.data == 'plan_list')
def handle_plan_list(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    plan_list_menu(call)


@bot.callback_query_handler(func=lambda c: c.data == 'plan_generate')
def handle_plan_generate(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    plan_generate_start(call)


@bot.callback_query_handler(func=lambda c: c.data == 'gen_tomorrow')
def handle_gen_tomorrow(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    tomorrow = date.today() + timedelta(days=1)
    plan_generate(call, fetch_date=date.today(), target_date=tomorrow)


@bot.callback_query_handler(func=lambda c: c.data.startswith("toggle_habit_"))
def handle_toggle_habit(call):
    habit_id = int(call.data.split("_")[2])
    cursor.execute(
        "SELECT done FROM habit_log WHERE habit_id = ? AND log_date = ?",
        (habit_id, date.today().isoformat())
    )
    row = cursor.fetchone()
    if row:
        new_done = 0 if row[0] else 1
        cursor.execute(
            "UPDATE habit_log SET done = ? WHERE habit_id = ? AND log_date = ?",
            (new_done, habit_id, date.today().isoformat())
        )
        cursor.execute(
            "UPDATE users SET xp = xp + ? WHERE tg_id = ?",
            (25 if new_done else -25, call.from_user.id)
        )
    else:
        cursor.execute(
            "INSERT INTO habit_log (habit_id, log_date, done) VALUES (?, ?, 1)",
            (habit_id, date.today().isoformat())
        )
        cursor.execute(
            "UPDATE users SET xp = xp + 25 WHERE tg_id = ?",
            (call.from_user.id,)
        )
    conn.commit()
    bot.answer_callback_query(call.id, "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    handle_mark_habit(call)


@bot.callback_query_handler(func=lambda c: c.data == 'list_today')
def handle_list_today(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_tasks(call, for_date=date.today())


@bot.callback_query_handler(func=lambda c: c.data == 'list_tomorrow')
def handle_list_tomorrow(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_tasks(call, for_date=date.today() + timedelta(days=1))


def show_tasks(call, for_date: date):
    cursor.execute(
        "SELECT id, description, duration, priority, done FROM tasks "
        "WHERE tg_id = ? AND task_date = ?",
        (call.from_user.id, for_date.isoformat())
    )
    if not cursor.fetchall():
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
        bot.send_message(
            call.message.chat.id,
            f"–ù–∞ {for_date.strftime('%d.%m.%Y')} –∑–∞–¥–∞—á –Ω–µ—Ç.",
            reply_markup=kb
        )
        return
    text = f"üìã –ó–∞–¥–∞—á–∏ –Ω–∞ {for_date.strftime('%d.%m.%Y')}:\n\n"
    for tid, desc, dur, prio, done in cursor.fetchall():
        status = "‚úÖ" if done else "‚ùå"
        text += f"{status} [{tid}] {desc} ‚Äî {dur} –º–∏–Ω, {prio}\n"
    kb = types.InlineKeyboardMarkup(row_width=1)
    for tid, desc, dur, prio, done in cursor.fetchall():
        if not done:
            kb.add(types.InlineKeyboardButton(
                f"‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å #{tid}", callback_data=f"complete_{tid}"
            ))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data == 'add_habit')
def handle_add_habit(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=back_kb)
    bot.register_next_step_handler(msg, save_habit)


def save_habit(message):
    if message.text == "–ù–∞–∑–∞–¥":
        return go_habits(message)
    cursor.execute(
        "INSERT INTO habits (tg_id, name) VALUES (?, ?)",
        (message.chat.id, message.text)
    )
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    show_habits_menu(SimpleNamespace(message=message))


def go_habits(call_or_msg):
    if hasattr(call_or_msg, 'message'):
        chat_id = call_or_msg.message.chat.id
        try:
            bot.delete_message(chat_id, call_or_msg.message.message_id)
        except Exception:
            pass
    else:
        chat_id = call_or_msg.chat.id
    cursor.execute("SELECT id, name FROM habits WHERE tg_id = ?", (chat_id,))
    rows = cursor.fetchall()
    text = "üóí –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    for hid, name in rows:
        text += f"{hid}. {name}\n"
    if not rows:
        text += "_–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏._\n"
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit"),
        types.InlineKeyboardButton("‚úîÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="mark_habit"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")
    )
    bot.send_message(chat_id, text, reply_markup=kb, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda c: c.data == 'mark_habit')
def handle_mark_habit(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    cursor.execute("SELECT id, name FROM habits WHERE tg_id = ?", (call.from_user.id,))
    if not cursor.fetchall():
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫")
        return show_habits_menu(call)
    kb = types.InlineKeyboardMarkup(row_width=1)
    today_str = date.today().isoformat()
    for hid, name in cursor.fetchall():
        cursor.execute(
            "SELECT done FROM habit_log WHERE habit_id = ? AND log_date = ?",
            (hid, today_str)
        )
        row = cursor.fetchone()
        btn_text = f"{'‚úÖ' if row and row[0] else '‚ùå'} {name}"
        kb.add(types.InlineKeyboardButton(btn_text, callback_data=f"toggle_habit_{hid}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="habits"))
    bot.send_message(call.message.chat.id, "–û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)


@bot.callback_query_handler(
    func=lambda call: not call.data.startswith("prio_")
                      and call.data != 'gen_tomorrow'
)
def handle_callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data == 'scheduling':
        go_scheduling(call)
    elif call.data == 'health':
        go_health(call)
    elif call.data == 'lessons':
        go_lessons(call)
    elif call.data == 'psychologist':
        go_psychologist(call)
    elif call.data == 'xp_game':
        go_xp_game(call)
    elif call.data == 'leaderboard':
        go_leaderboard(call)
    elif call.data == 'sleep_prefs':
        go_sleep_prefs(call)
    elif call.data == 'plan_add':
        plan_add_start(call)
    elif call.data == 'plan_list':
        plan_list_menu(call)
    elif call.data == 'habits':
        go_habits(call)
    elif call.data == 'plan_generate':
        plan_generate_start(call)
    elif call.data == 'gen_tomorrow':
        plan_generate(call, fetch_date=date.today(), target_date=date.today() + timedelta(days=1))
    elif call.data == 'back':
        start(call.message)


def get_today_motivation():
    seed = int(hashlib.sha1(date.today().isoformat().encode()).hexdigest(), 16)
    return MOTIVATIONS[seed % len(MOTIVATIONS)]


def get_badge(streak):
    if streak >= 15:
        return "–≠–∫—Å–ø–µ—Ä—Ç"
    if streak >= 5:
        return "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    return "–ù–æ–≤–∏—á–æ–∫"


def ensure_user_exists(tg_id):
    cursor.execute('SELECT 1 FROM users WHERE tg_id = ?', (tg_id,))
    if not cursor.fetchone():
        cursor.execute(
            'INSERT INTO users (tg_id, streak, last_active) VALUES (?, ?, ?)',
            (tg_id, 1, datetime.today().date())
        )
        conn.commit()


def get_psychologist_reply(question_text):
    system = ("You are an empathetic professional psychologist. "
              "You only talk about personal and emotional issues. "
              "If asked anything else, refuse: ‚ÄúI can‚Äôt help with that.‚Äù")
    msgs = [
        {'role': 'system', 'content': system},
        {'role': 'user', 'content': question_text}
    ]
    return g4f.ChatCompletion.create(
        model="gpt-4",
        messages=msgs
    )


def get_homework_solution(prompt_text):
    system = (
        "You are a helpful AI tutor. "
        "When given a homework question, provide a clear, step‚Äëby‚Äëstep solution. "
        "Do not offer unrelated advice."
    )
    messages = [
        {'role': 'system', 'content': system},
        {'role': 'user', 'content': prompt_text}
    ]
    return g4f.ChatCompletion.create(
        model="gpt-4",
        messages=messages
    )


def get_health_tips(sleep, fatigue, mood):
    system = (
        "–ì–æ–≤–æ—Ä–∏ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "You are a friendly health coach. "
        "Based on the user's sleep (1‚Äì5), fatigue (yes/no) and mood (emoji), "
        "provide 3 simple personalized tips to improve well‚Äëbeing today."
    )
    user_msg = f"Sleep: {sleep}/5; Fatigue: {fatigue}; Mood: {mood}"
    msgs = [
        {'role': 'system', 'content': system},
        {'role': 'user', 'content': user_msg}
    ]
    return g4f.ChatCompletion.create(model="gpt-4", messages=msgs)


def schedule_user_sleep_reminder(tg_id: int, bedtime: str):
    h, m = map(int, bedtime.split(':'))
    rem_min = m - 15
    rem_hour = h
    if rem_min < 0:
        rem_min += 60
        rem_hour = (h - 1) % 24
    job_id = f"sleep_{tg_id}"
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass
    scheduler.add_job(
        send_sleep_reminder,
        trigger='cron',
        hour=rem_hour,
        minute=rem_min,
        args=[tg_id],
        id=job_id,
        replace_existing=True
    )


def go_scheduling(call):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="plan_add"),
        types.InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏ (–°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞)", callback_data="plan_list"),
        types.InlineKeyboardButton("üóì –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞", callback_data="plan_generate"),
        types.InlineKeyboardButton("üóí –ü—Ä–∏–≤—ã—á–∫–∏", callback_data="habits"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")
    )
    bot.send_message(call.message.chat.id, "–†–∞–∑–¥–µ–ª ¬´–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


def plan_add_start(call):
    msg = bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=back_kb)
    bot.register_next_step_handler(msg, plan_add_desc)


def plan_add_desc(message):
    if message.text == "–ù–∞–∑–∞–¥":
        return go_scheduling(message)
    pending_tasks[message.chat.id] = {'desc': message.text}
    msg = bot.send_message(
        message.chat.id,
        "‚è± –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (—á–∏—Å–ª–æ–º):",
        reply_markup=back_kb
    )
    bot.register_next_step_handler(msg, plan_add_duration)


def plan_add_duration(message):
    if message.text == "–ù–∞–∑–∞–¥":
        return go_scheduling(message)
    try:
        dur = int(message.text)
    except:
        return bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç:", reply_markup=back_kb)
    pending_tasks[message.chat.id]['duration'] = dur
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π", callback_data="prio_high"),
        types.InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data="prio_medium"),
        types.InlineKeyboardButton("–ù–∏–∑–∫–∏–π", callback_data="prio_low"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    )
    bot.send_message(message.chat.id, "üî∫ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=kb)


def plan_list_menu(call):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="list_today"),
        types.InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="list_tomorrow"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    )
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á:", reply_markup=kb)


def plan_generate_start(call):
    if datetime.now().hour >= 21:
        bot.send_message(call.message.chat.id, "–°–µ–π—á–∞—Å –ø–æ–∑–¥–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?",
                         reply_markup=types.InlineKeyboardMarkup().add(
                             types.InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="gen_tomorrow"),
                             types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
                         ))
    else:
        plan_generate(call, fetch_date=date.today(), target_date=date.today())


def plan_generate(call, fetch_date: date, target_date: date):
    cursor.execute(
        "SELECT description, duration, priority FROM tasks "
        "WHERE tg_id = ? AND task_date = ? AND done = 0",
        (call.from_user.id, fetch_date.isoformat())
    )
    if not cursor.fetchall():
        bot.send_message(
            call.message.chat.id,
            f"–ù–∞ {target_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
        )
        return go_scheduling(call)
    prompt = f"–°–¥–µ–ª–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω‚Äë—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {target_date.strftime('%d.%m.%Y')} –¥–ª—è –∑–∞–¥–∞—á:\n"
    for desc, dur, prio in cursor.fetchall():
        prompt += f"- {desc} ({dur} –º–∏–Ω), –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {prio}\n"
    prompt += (
        "\n–°–æ—Å—Ç–∞–≤—å –µ–≥–æ –≤ —É–¥–æ–±–Ω–æ–º —Ç–∞–π–º‚Äë–±–ª–æ–∫–∏–Ω–≥–µ, –Ω–∞—á–∏–Ω–∞—è —Å —É—Ç—Ä–∞. "
        "–ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø–æ–∑–¥–Ω–µ–µ, –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å."
    )
    bot.send_chat_action(call.message.chat.id, 'typing')
    plan_text = g4f.ChatCompletion.create(
        model="gpt-4",
        messages=[{'role': 'user', 'content': prompt}]
    )
    bot.send_message(call.message.chat.id, plan_text)
    go_scheduling(call)


def show_habits_menu(call):
    cursor.execute("SELECT id, name FROM habits WHERE tg_id = ?", (call.message.chat.id,))
    text = "üóí –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    for hid, name in cursor.fetchall():
        text += f"{hid}. {name}\n"
    if not cursor.fetchall():
        text += "_–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏._\n"
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit"),
        types.InlineKeyboardButton("‚úîÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="mark_habit"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")
    )
    bot.send_message(call.message.chat.id, text, reply_markup=kb, parse_mode='Markdown')


def go_health(call):
    cursor.execute(
        """
        SELECT sleep_rating, fatigue, mood, tips
        FROM health_checks
        WHERE tg_id = ?
          AND date(created_at) = date('now')
        """,
        (call.message.chat.id,)
    )
    row = cursor.fetchone()
    if row:
        sleep_rating, fatigue, mood, tips = row
        text = (
            f"üìä –¢–≤–æ–π —á–µ–∫‚Äë–∞–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"‚Ä¢ –°–æ–Ω: {sleep_rating}/5\n"
            f"‚Ä¢ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {fatigue}/5\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}/5\n\n"
            f"ü©∫ –°–æ–≤–µ—Ç—ã:\n{tips}"
        )
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'),
            types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–Ω–∞ üåô', callback_data='sleep_prefs')
        )
        bot.send_message(call.message.chat.id, text, reply_markup=kb)
    else:
        msg = bot.send_message(
            call.message.chat.id,
            "üåô –û—Ü–µ–Ω–∏, –∫–∞–∫ —Ç—ã —Å–ø–∞–ª —Å–µ–≥–æ–¥–Ω—è (1 ‚Äî —É–∂–∞—Å–Ω–æ, 5 ‚Äî –æ—Ç–ª–∏—á–Ω–æ):",
            reply_markup=back_kb
        )
        bot.register_next_step_handler(msg, health_step_two)


def health_step_two(message):
    if message.text.strip() == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶", reply_markup=types.ReplyKeyboardRemove())
        return start(message)
    try:
        sleep = int(message.text.strip())
        if not 1 <= sleep <= 5:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id,
                               "–ù–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ 1‚Äì5 –∑–∞ —Å–≤–æ–π —Å–æ–Ω:",
                               reply_markup=back_kb
                               )
        return bot.register_next_step_handler(msg, health_step_two)
    msg = bot.send_message(
        message.chat.id,
        "üòì –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ (1 ‚Äî –Ω–µ —É—Å—Ç–∞–Ω—É, 5 ‚Äî –æ—á–µ–Ω—å —É—Å—Ç–∞—é):",
        reply_markup=back_kb
    )
    bot.register_next_step_handler(msg, lambda m: health_step_three(m, sleep))


def health_step_three(message, sleep):
    if message.text.strip() == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶", reply_markup=types.ReplyKeyboardRemove())
        return start(message)
    try:
        fatigue = int(message.text.strip())
        if not 1 <= fatigue <= 5:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id,
                               "–ù–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ 1‚Äì5 –∑–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å:",
                               reply_markup=back_kb
                               )
        return bot.register_next_step_handler(msg, lambda m: health_step_three(m, sleep))
    msg = bot.send_message(
        message.chat.id,
        "üôÇ –û—Ü–µ–Ω–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (1 ‚Äî –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ, 5 ‚Äî —Å—É–ø–µ—Ä):",
        reply_markup=back_kb
    )
    bot.register_next_step_handler(msg, lambda m: handle_health_result(m, sleep, fatigue))


def handle_health_result(message, sleep, fatigue):
    try:
        mood = int(message.text.strip())
        if not 1 <= mood <= 5:
            raise ValueError
    except:
        return bot.send_message(message.chat.id, "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5 –∑–∞ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:",
                                reply_markup=back_kb)
    bot.send_chat_action(message.chat.id, 'typing')
    try:
        tips = get_health_tips(sleep, fatigue, mood)
    except Exception as e:
        return bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: {e}")
    cursor.execute(
        'INSERT INTO health_checks (tg_id, sleep_rating, fatigue, mood, tips) VALUES (?, ?, ?, ?, ?)',
        (message.chat.id, sleep, fatigue, mood, tips)
    )
    cursor.execute('UPDATE users SET xp = xp + 15 WHERE tg_id = ?', (message.chat.id,))
    conn.commit()
    bot.send_message(message.chat.id, "üéâ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª 15 XP!")
    bot.send_message(message.chat.id, tips, reply_markup=types.ReplyKeyboardRemove())
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'),
        types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–Ω–∞ üåô', callback_data='sleep_prefs')
    )
    bot.send_message(message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)


def go_lessons(call):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å'))
    with open('photo_homework.jpg', 'rb') as photo:
        msg = bot.send_photo(
            chat_id=call.message.chat.id,
            photo=photo,
            caption="üìù –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
            reply_markup=kb
        )
    bot.register_next_step_handler(msg, handle_homework_chat)


def handle_homework_chat(message):
    if message.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å':
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è ¬´–ü–æ–º–æ—â—å —Å –î–ó¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return start(message)
    bot.send_chat_action(message.chat.id, 'typing')
    try:
        answer = get_homework_solution(message.text)
    except Exception as e:
        return bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏: {e}")
    cursor.execute(
        'INSERT INTO homework_history (tg_id, question, answer) VALUES (?, ?, ?)',
        (message.chat.id, message.text, answer)
    )
    conn.commit()
    bot.send_message(message.chat.id, answer, reply_markup=types.ReplyKeyboardRemove())
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å'))
    msg = bot.send_message(message.chat.id, "–ó–∞–¥–∞–≤–∞–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å¬ª", reply_markup=kb)
    bot.register_next_step_handler(msg, handle_homework_chat)


def go_psychologist(call):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å'))
    with open('photo_psychologist.jpg', 'rb') as photo:
        msg = bot.send_photo(
            chat_id=call.message.chat.id,
            photo=photo,
            caption="üß† –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π –ª–∏—á–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ. –Ø –ø–æ–º–æ–≥—É —Å–æ–≤–µ—Ç–æ–º.",
            reply_markup=kb
        )
    bot.register_next_step_handler(msg, handle_psychologist_chat)


def handle_psychologist_chat(message):
    if message.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å':
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è –ò–ò‚Äë–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return start(message)
    bot.send_chat_action(message.chat.id, 'typing')
    try:
        answer = get_psychologist_reply(message.text)
    except Exception as e:
        return bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò: {e}")
    cursor.execute(
        'INSERT INTO psychologist_history (tg_id, question, answer) VALUES (?, ?, ?)',
        (message.chat.id, message.text, answer)
    )
    conn.commit()
    bot.send_message(message.chat.id, answer, reply_markup=types.ReplyKeyboardRemove())
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å'))
    msg = bot.send_message(message.chat.id, "–ó–∞–¥–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å¬ª", reply_markup=kb)
    bot.register_next_step_handler(msg, handle_psychologist_chat)


def go_leaderboard(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    cursor.execute('''
        SELECT tg_id, xp
        FROM users
        ORDER BY xp DESC
        LIMIT 5
    ''')
    top5 = cursor.fetchall()
    if top5:
        text = "üèÜ –¢–æ–ø‚Äë5 –ø–æ XP:\n\n"
        for i, (tg, xp) in enumerate(top5, start=1):
            try:
                user = bot.get_chat(tg)
                name = f"@{user.username}" if user.username else user.first_name
            except:
                name = str(tg)
            text += f"{i}. {name} ‚Äî {xp} XP\n"
    else:
        text = "–ù–∏–∫—Ç–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞–±—Ä–∞–ª XP"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(
        call.message.chat.id,
        text,
        parse_mode='HTML',
        reply_markup=kb
    )


def go_xp_game(call):
    ensure_user_exists(call.message.chat.id)
    cursor.execute(
        'SELECT xp, streak, last_active FROM users WHERE tg_id = ?',
        (call.message.chat.id,)
    )
    xp, streak, last_active = cursor.fetchone()
    today = datetime.today().date()
    yesterday = today - timedelta(days=1)
    if last_active == today:
        pass
    elif last_active == yesterday:
        streak += 1
        cursor.execute(
            'UPDATE users SET streak = ?, last_active = ? WHERE tg_id = ?',
            (streak, today, call.message.chat.id)
        )
        conn.commit()
    else:
        streak = 1
        cursor.execute(
            'UPDATE users SET streak = ?, last_active = ? WHERE tg_id = ?',
            (streak, today, call.message.chat.id)
        )
        conn.commit()
    level = xp // 100 + 1
    if streak >= 20:
        badge = "–≠–∫—Å–ø–µ—Ä—Ç üèÖ"
    elif streak >= 10:
        badge = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π ü•à"
    else:
        badge = "–ù–æ–≤–∏—á–æ–∫ ü•â"
    today_index = datetime.today().toordinal() % len(MOTIVATIONS)
    motivation = MOTIVATIONS[today_index]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))
    text = (
        f"üéÆ *XP Game*\n\n"
        f"üè∑ –£—Ä–æ–≤–µ–Ω—å: *{level}*\n"
        f"‚≠ê XP: *{xp}*\n"
        f"üî• –°—Ç—Ä–∏–∫: *{streak}* –¥–Ω–µ–π\n"
        f"üéñ –°—Ç–∞—Ç—É—Å: *{badge}*\n\n"
        f"üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:\n_{motivation}_"
    )
    bot.send_message(
        chat_id=call.message.chat.id,
        text=text,
        parse_mode='Markdown',
        reply_markup=markup
    )


def go_sleep_prefs(call):
    msg = bot.send_message(
        call.message.chat.id,
        "‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å? –§–æ—Ä–º–∞—Ç HH:MM (24‚Äë—á):"
    )
    bot.register_next_step_handler(msg, handle_sleep_prefs)


def handle_sleep_prefs(message):
    try:
        h, m = map(int, message.text.strip().split(':'))
        assert 0 <= h < 24 and 0 <= m < 60
    except:
        return bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π HH:MM. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    cursor.execute(
        '''INSERT INTO sleep_prefs (tg_id, bedtime) VALUES (?, ?)
           ON CONFLICT(tg_id) DO UPDATE SET bedtime=excluded.bedtime''',
        (message.chat.id, message.text.strip())
    )
    conn.commit()
    now = datetime.now()
    bedtime_dt = now.replace(hour=h, minute=m, second=0, microsecond=0)
    if bedtime_dt <= now:
        bot.send_message(message.chat.id, "üò¥ –£–∂–µ –¥–∞–≤–Ω–æ –ø–æ—Ä–∞ —Å–ø–∞—Ç—å!")
    else:
        delta = bedtime_dt - now
        if delta <= timedelta(minutes=15):
            bot.send_message(message.chat.id, "‚åõÔ∏è –£–∂–µ –ø–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ —Å–Ω—É!")
        else:
            schedule_user_sleep_reminder(message.chat.id, message.text.strip())
            bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞–ø–æ–º–Ω—é –∑–∞ 15 –º–∏–Ω –¥–æ {message.text.strip()}.")
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶")
    start(message)


def send_sleep_reminder(tg_id):
    bot.send_message(tg_id, "‚åõÔ∏è –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ø–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ —Å–Ω—É!")


def schedule_all_sleep_reminders():
    cursor.execute('SELECT tg_id, bedtime FROM sleep_prefs')
    for tg_id, bedtime in cursor.fetchall():
        schedule_user_sleep_reminder(tg_id, bedtime)


schedule_all_sleep_reminders()
bot.polling(none_stop=True)
